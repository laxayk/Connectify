<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Connectify-Video</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@100;300;400;500;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="index.css">
  <!-- The core Firebase JS SDK is always required and must be listed first -->





</head>
<body>
<div id="full-page">
  <video autoplay id="screen-view" width="50%"></video>
<div id="cont">
  <div id="remote-media"></div>
  <div id="controls">
    <div id="room-details">
      <input id="room-name" type="text" placeholder="Enter a Room Code" />
      </div>
    <div id="room-controls">
      
      <button class="leave-join-btns" id="button-join">Join Room</button>
      <button class="leave-join-btns" id="button-leave">Leave Room</button>
      
    </div>
    <div id="preview">
      <div id="local-media"></div>
      <button id="button-preview">Preview My Camera</button>
      <!-- <button id="mute-voice">mute</button>
      <button id="close-video">close</button> -->
    </div>
    <div id="log"></div>

    
  </div>
</div>
<div class="navbar">

  <h1>Connectify</h1>
  <div class="button-controls">
  <button id="screen-share"><img src="https://img.icons8.com/bubbles/75/000000/share.png"/>Share Screen</button>
  <button id="stop-screen" style="display:none"><img src="https://img.icons8.com/bubbles/75/000000/cloud-cross.png"/>Stop</button>
  <button id="chat-open" onclick="openNav()"><img src="https://img.icons8.com/bubbles/75/000000/chat.png"/>Chat</button>
  </div>    
</div>
<div id="right-side">
<!-- <section >      
    <div id="messages"></div>
    <input id="chat-input" type="text" placeholder="say anything" autofocus onsubmit="return sendMessage();"/>
</section> -->
<form onsubmit="return sendMessage();">
  <input id="message" type="text" placeholder="say anything" autocomplete="off"  />
  <input id="submit-btn" type="submit" />
</form>
<div id="chat-box">
  <p id="joining"></p>
<ul id="messages"></ul>
</div>
</div>
</div>
<script src="https://www.gstatic.com/firebasejs/8.7.1/firebase-app.js"></script>

  <script src="https://www.gstatic.com/firebasejs/8.7.1/firebase-database.js"></script>
  <!-- TODO: Add SDKs for Firebase products that you want to use
     https://firebase.google.com/docs/web/setup#available-libraries -->
<script src="https://www.gstatic.com/firebasejs/8.7.1/firebase-analytics.js"></script>
<script>
  // Your web app's Firebase configuration
  // For Firebase JS SDK v7.20.0 and later, measurementId is optional
  var firebaseConfig = {
    apiKey: "AIzaSyDXFMeMmQpn2F4JJU7_foPDuBAAuYJTQmI",
    authDomain: "engage21.firebaseapp.com",
    projectId: "engage21",
    storageBucket: "engage21.appspot.com",
    messagingSenderId: "546656229051",
    appId: "1:546656229051:web:c005eb5921efb7f76dbb9e",
    measurementId: "G-9HJHQF3C8G",
    databaseURL: "https://engage21-default-rtdb.asia-southeast1.firebasedatabase.app/"
  };
  // Initialize Firebase
  firebase.initializeApp(firebaseConfig);
  firebase.analytics();
  var database = firebase.database();
  var num=0;
  var myName = prompt('Enter Your Name');
  var roomName = prompt('Enter a Room Name for Chat');
  function sendMessage(){
    var message =  document.getElementById("message").value;
    //roomName = document.getElementById("room-name").value;

    database.ref(roomName).push().set({
      "key": num,
      "Sender": myName,
      "message": message
    });
    num++;
    deleteInput();
    return false;
  }
  function deleteInput(){
    document.getElementById("message").value = null;
  }
  var html5 = "";
    html5 = "joined chat room... " + roomName;
    document.getElementById("joining").innerHTML = html5;
    database.ref(roomName).on("child_added", function(snapshot){
    
      if(snapshot.val().Sender == myName){
        var html = "";
        html += "<li class=my-message >";
          html += snapshot.val().message;
        html += "<li";
        document.getElementById("messages").innerHTML += html;
      }else{
        var html = "";
        html += "<li class=others-message >";
          html += snapshot.val().Sender + ": " + "<span class=space></span>" + snapshot.val().message;
        html += "<li";
        document.getElementById("messages").innerHTML += html;
      }
    
  });

 
</script>
  <script>
    var isopen = true;
    function openNav() {
      if(!isopen){
      document.getElementById("right-side").style.visibility = 'visible';
      document.getElementById("remote-media").style.width = "48%";
      isopen=true;
      }
      else{
      document.getElementById("right-side").style.visibility = 'hidden';
      document.getElementById("remote-media").style.width= "73.9%";
      isopen=false;
      }
    }
    

    </script>
    <script>
      (() => {
  const EXTENSION_ID = "abgifaacmhcebnnkipijgdaeghnfmodd";

  const video = document.getElementById('screen-view');
  const getScreen = document.getElementById('screen-share');
  const stopScreen = document.getElementById('stop-screen');
  const request = { sources: ['window', 'screen', 'tab'] };
  let stream;
  getScreen.addEventListener('click', event => {
    chrome.runtime.sendMessage(EXTENSION_ID, request, response => {
        if (response && response.type === 'success') {
        navigator.mediaDevices.getUserMedia({
          video: {
            mandatory: {
              chromeMediaSource: 'desktop',
              chromeMediaSourceId: response.streamId,
            }
          }
        }).then(returnedStream => {
          stream = returnedStream;
          video.src = URL.createObjectURL(stream);
          getScreen.style.display = "none";
          stopScreen.style.display = "inline";
        }).catch(err => {
          console.error('Could not get stream: ', err);
        });

      } else {
        console.error('Could not get stream');
      }
    });
  });
  stopScreen.addEventListener('click', event => {
    stream.getTracks().forEach(track => track.stop());
    video.src = '';
    stopScreen.style.display = "none";
    getScreen.style.display = "inline";
  });
})();

  </script>
  <script src="//media.twiliocdn.com/sdk/js/common/v0.1/twilio-common.min.js"></script>
  <script src="//media.twiliocdn.com/sdk/js/video/releases/1.14.0/twilio-video.js"></script>
  <script src="https://media.twiliocdn.com/sdk/js/chat/releases/4.0.0/twilio-chat.js"></script>
  

  <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
  <script src="quickstart.js"></script>
  
  

</body>
</html>
